name: Publish to PyPi

on:
  release:
    types: [published] # Run when a new published release is detected.

env:
  BUILD-ARTIFACT-NAME: "poetry-build-dist"
  REPOSITORY-PUSH-URL: "https://test.pypi.org/legacy/"
  REPOSITORY-URL: "https://test.pypi.org/p/testdeployofpypi"

permissions:
  contents: read

jobs:
  release-build-poetry:
    uses: nicburgt/.github/.github/workflows/poetry-build.yml@55d84f57654037335247793b0d28450d2cb0b859
    with:
      version: ${{ github.event.release.tag_name }}
      poetry-build-artifact-name: $BUILD-ARTIFACT-NAME

  # unfortunately, this step cannot be made into a reusable workflow (yet).
  # see https://github.com/pypi/warehouse/issues/11096.
  # We could use a global user + password combination to publish to pypi,
  # but this is a lot less secure than a per repository OIDC token which expires
  # And only grants access to a single repository, instead of all the repositories
  # published under a user.
  pypi-publish:
    runs-on: ubuntu-latest
    needs: [release-build-poetry]
    permissions:
      id-token: write
    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: testpypi
      url: $REPOSITORY-URL/${{ github.event.release.tag_name }}
    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: $BUILD-ARTIFACT-NAME
          path: dist/
      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          repository-url: $REPOSITORY-PUSH-URL
